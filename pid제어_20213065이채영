#include <Servo.h>     // [20213066] 서보모터 라이브러리 사용

/////////////////////////////
// Configurable parameters //
/////////////////////////////

// Arduino pin assignment
//#define PIN_LED 9          // [20200000] LED 핀 정의
#define PIN_SERVO 10       // [20213069] servo 핀 정의
#define PIN_IR A0      // [20213077] analong 핀 정의 

// Framework setting
#define _DIST_TARGET 255  // [20213080] 멈추려는 목표거리 정의
#define _DIST_MIN 100 // [20213058] 측정 최소거리, 플로터 범위
#define _DIST_MAX 410    // [20213065] 측정 최대거리,플로터 범위

// Distance sensor
#define _DIST_ALPHA 0.2    
#define _EMA_ALPHA 0.2

// Servo range
#define _DUTY_MIN 1000    // [20213060] 서보 duty 최소값
#define _DUTY_NEU 1550    // [20213064] 서보 duty 중간값
#define _DUTY_MAX 2000    // [20213079] 서보 duty 최댓값

// Servo speed control
#define _SERVO_ANGLE 30       // [20213062] 서보 각도
#define _SERVO_SPEED 30     // [20213075] 서보의 속도
  
// Event periods
#define _INTERVAL_DIST 20   // [20213058] 거리측정 주기
#define _INTERVAL_SERVO 20    // [20213055] 서보 조정 주기  
#define _INTERVAL_SERIAL 100  // [20213058] 시리얼 제어 주기

// PID parameters
#define _KP 3.0   // [20213058]비례이득
#define _KD 120.0     // 미분이득
#define _KI 0.02

#define _IT_MAXI 30.0

#define num 25
float sensorValues[num];
float accumList[num];
int average = num / 2;

//////////////////////
// global variables //
//////////////////////


Servo myservo;


float dist_target; // location to send the ball
float dist_raw, dist_ema;
float ema_res;
float dist_cali;

// Event periods
unsigned long last_sampling_time_dist, last_sampling_time_servo, last_sampling_time_serial; 
bool event_dist, event_servo, event_serial;

// Servo speed control
int duty_chg_per_interval; 
int duty_target, duty_curr; 

// PID variables
float error_curr, error_prev, control, pterm, dterm, iterm;



void setup() {
  myservo.attach(PIN_SERVO);

  duty_target = duty_curr = _DUTY_NEU;
  myservo.writeMicroseconds(_DUTY_NEU); 

  Serial.begin(57600); 

  dist_raw = 0.0;
  dist_cali = 0.0;
  ema_res = 0.0;
  
  
  dist_target = _DIST_TARGET;
  error_curr = error_prev = 0.0;
  control = pterm = dterm = iterm = 0.0;

  last_sampling_time_dist = 0;
  last_sampling_time_servo = 0;
  last_sampling_time_serial = 0;

  event_dist = event_servo = event_serial = false;
  duty_chg_per_interval = (float)(_DUTY_MAX - _DUTY_MIN) * _SERVO_SPEED / ((float)_SERVO_ANGLE) * _INTERVAL_SERVO / 1000;
  duty_target = 0;
  duty_curr = _DUTY_NEU;
}
  


void loop() {
/////////////////////
// Event generator //
/////////////////////
  unsigned long time_curr = millis();
  if(time_curr >= last_sampling_time_dist + _INTERVAL_DIST) {
        last_sampling_time_dist += _INTERVAL_DIST;
        event_dist = true;
  }
  if(time_curr >= last_sampling_time_servo + _INTERVAL_SERVO) {
        last_sampling_time_servo += _INTERVAL_SERVO;
        event_servo = true;
  }
  if(time_curr >= last_sampling_time_serial + _INTERVAL_SERIAL) {
        last_sampling_time_serial += _INTERVAL_SERIAL;
        event_serial = true;
  } 



////////////////////
// Event handlers //
////////////////////

  if(event_dist) {
     event_dist = false; //[20213078]

      dist_raw = ir_distance(); // [20213055]
      dist_cali = ir_filtered(dist_raw);
      ema_res = (_EMA_ALPHA * dist_cali) + ((1 - _EMA_ALPHA) * ema_res);
  
  //ema_res값 보정(노이즈)
  for (int i = 0 ; i < num - 1 ; i++){
       sensorValues[i] = sensorValues[i+1];
     }
     sensorValues[num - 1] = ema_res;

     for (int i = 0; i < num - 1; i ++){
      accumList[i] = sensorValues[i];
     }
     
     for (int i = 0; i < num - 1; i++){
       for (int j = 0; j < num - 1; j++){
         if (accumList[j] > accumList[j+1]){
           float buff = accumList[j];
           accumList[j] = accumList[j+1];
           accumList[j+1] = buff;
         }
       }
     }
     ema_res = (accumList[average - 1] + accumList[average] + accumList[average + 1]) / 3.0;
  
  
  
  // PID control logic
    error_curr = dist_target - ema_res;
    pterm = _KP * error_curr;
    dterm = _KD * (error_curr - error_prev);
    iterm = _KI * error_curr;
    control = pterm + dterm + iterm;

    duty_target = _DUTY_NEU + control;

    if(abs(iterm) > _IT_MAXI) iterm = 0;
  
    if(duty_target < _DUTY_MIN){
      duty_target = _DUTY_MIN;
    }
    if(duty_target > _DUTY_MAX){
      duty_target = _DUTY_MAX;
    } 

    error_prev = error_curr;
    }
  
    if(event_servo) {
      event_servo = false;

      if(duty_target > duty_curr) {
        duty_curr += duty_chg_per_interval;
        if(duty_curr > duty_target) duty_curr = duty_target;
      }
      else {
        duty_curr -= duty_chg_per_interval;
        if(duty_curr < duty_target) duty_curr = duty_target;
  
      }
  
}
  myservo.writeMicroseconds(duty_curr);
  

  if(event_serial) {
    event_serial = false;
    Serial.print("IR:");
    Serial.print(ema_res);
    Serial.print(",T:");
    Serial.print(dist_target);
    Serial.print(",P:");
    Serial.print(map(pterm,-1000,1000,510,610));
    Serial.print(",D:");
    Serial.print(map(dterm,-1000,1000,510,610));
    Serial.print(",I:");
    Serial.print(map(iterm,-1000,1000,510,610));
    Serial.print(",DTT:");
    Serial.print(map(duty_target,1000,2000,410,510));
    Serial.print(",DTC:");
    Serial.print(map(duty_curr,1000,2000,410,510));
    Serial.println(",-G:245,+G:265,m:0,M:800");
  }
}

float ir_distance(void){ // return value unit: mm
  int a = 70;
  int b = 300;
  float val;
  float volt = float(analogRead(PIN_IR));
  val = ((6762.0/(volt-9.0))-4.0) * 10.0;
  val = 100 + 300.0 / (b - a) * (val - a);
  return val;
}

float ir_filtered(float x)
{
  float val = 0.0;
  if(x >= 66.0 && x <= 77.0) {val = 50.0 / 11.0 * x - 200;} 
  else if(x > 77.0 && x <= 130.0){val = 50.0 / 53.0 * x + 78;}
  else if(x > 130.0 && x <= 177.0){val = 50.0 / 47.0 * x + 63;}
  else if(x > 177.0 && x <= 224.0){val = 50.0 / 47.0 * x + 63;}
  else if(x > 224.0 && x <= 264.0){val = 50.0 / 40.0 * x + 20;}
  else if(x > 264.0 && x <= 354.0){val = 50.0 / 90.0 * x + 203;}
  else if(x > 354.0) {val = 0.7 *x + 153;} // 400 이상

  return val;
}
