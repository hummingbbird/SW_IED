#include <Servo.h>

/////////////////////////////
// Configurable parameters //
/////////////////////////////

#define PIN_SERVO 10
#define PIN_IR A0

#define _DIST_TARGET 265 
#define _DIST_MIN 100  
#define _DIST_MAX 410 

#define _EMA_ALPHA 0.3 

#define _DUTY_MIN 1000 
#define _DUTY_NEU 1550 
#define _DUTY_MAX 1980 

#define _SERVO_ANGLE 20
#define _SERVO_SPEED 50 

#define _INTERVAL_DIST 20 
#define _INTERVAL_SERVO 20 
#define _INTERVAL_SERIAL 100 

#define _KP 2.0  
#define _KD 100  

Servo myservo; 

float dist_raw; 
float dist_cali; 
float ema_fin; 

unsigned long last_sampling_time_dist, last_sampling_time_servo, last_sampling_time_serial; 
bool event_dist, event_servo, event_serial; 

float dist_min, dist_max, dist_tar; 

int duty_chg_per_interval; 
int duty_target, duty_curr;  
float error_curr, error_prev, control, pterm, dterm, iterm;

void setup() {
  myservo.attach(PIN_SERVO);
  myservo.writeMicroseconds(_DUTY_NEU);

  // 전역변수 초기화
  dist_raw = 0.0;
  dist_cali = 0.0;
  ema_fin = 0.0;

  dist_min = _DIST_MIN;
  dist_max = _DIST_MAX;
  dist_tar = _DIST_TARGET;

  duty_chg_per_interval = (float)(_DUTY_MAX - _DUTY_MIN) * (float)(_SERVO_SPEED / 180.0) * (float)(_INTERVAL_SERVO / 1000.0);
//  duty_target = 0;
//  duty_curr = _DUTY_NEU;
  duty_target = duty_curr = _DUTY_NEU;

  event_dist = false;
  event_servo = false;
  event_serial = false;

  last_sampling_time_dist = 0;
  last_sampling_time_servo = 0;
  last_sampling_time_serial = 0;

    
  error_curr = 0.0;
  error_prev = 0.0;
  control = 0.0;
  pterm = 0.0; 
  dterm = 0.0;


  // 보드레이트 설정
  Serial.begin(57600);

  
}

float ir_distance()
{
  float val;
  float volt = float(analogRead(PIN_IR));
  val = ((6762.0/(volt-9.0))-4.0) * 10.0;
  return val; // mm 단위로 적외선 센서가 측정한 거리 반환
}

float ir_filter(float x)
{
  float val = 0.0;
  if(x >= 66.0 && x <= 75.0) {val = 50.0 / 10.0 * x - 200;} 
  else if(x > 75.0 && x <= 130.0){val = 50.0 / 55.0 * x + 80;}
  else if(x > 130.0 && x <= 180.0){val = 50.0 / 45.0 * x + 64;
  else if(x > 180.0 && x <= 225.0){val = 50.0 / 45.0 * x + 64;} 
  else if(x > 225.0 && x <= 260.0){val = 50.0 / 41.0 * x + 21;} 
  else if(x > 260.0 && x <= 350.0){val = 50.0 / 87.0 * x + 200;}
  else if(x > 350.0) {val = 0.7 *x + 153;} 

  return val; // mm 단위로 보정된 센서 측정값을 반환
}


void loop()
{


  if (millis() >= last_sampling_time_dist + _INTERVAL_DIST) event_dist = true;
  if (millis() >= last_sampling_time_servo + _INTERVAL_SERVO) event_servo = true;
  if (millis() >= last_sampling_time_serial + _INTERVAL_SERIAL) event_serial = true;
  
  if(event_dist)
  {
    event_dist = false;
    dist_raw = ir_distance();
    float dist_cali = ir_filter(dist_raw);
    ema_fin = (_EMA_ALPHA * dist_cali) + ((1-_EMA_ALPHA) * ema_fin); 

    error_curr = _DIST_TARGET - ema_fin;
    pterm = _KP * error_curr;
    dterm = _KD * (error_curr - error_prev);  
    control = pterm + dterm;
    duty_target = _DUTY_NEU + control;

    if(duty_target > _DUTY_MAX){
      duty_target = _DUTY_MAX;
    }
    if(duty_target < _DUTY_MIN){
      duty_target = _DUTY_MIN;
    }

    error_prev = error_curr;

    last_sampling_time_dist = millis();
  }

   if(event_servo)
   {
      event_servo = false;

      if(duty_target > duty_curr)
        duty_curr += duty_chg_per_interval;
      else if(duty_target < duty_curr)
        duty_curr -= duty_chg_per_interval;

      myservo.writeMicroseconds(duty_curr);

      last_sampling_time_servo = millis();
   }

  if(event_serial)
  {
    event_serial = false;
    Serial.print("dist_ir:");
    Serial.print(dist_raw);
    Serial.print(",pterm:");
    Serial.print(map(pterm,-1000,1000,510,610));
    Serial.print(",dterm:");
    Serial.print(map(dterm,-1000,1000,510,610));
    Serial.print(",duty_target:");
    Serial.print(map(duty_target,1000,2000,410,510));
    Serial.print(",duty_curr:");
    Serial.print(map(duty_curr,1000,2000,410,510));
    Serial.println(",Min:100,Low:200,dist_target:255,High:310,Max:410");
    
    last_sampling_time_serial = millis();
  }
}
